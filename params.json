{
  "name": "Typegrind",
  "tagline": "type preserving heap profiler for C++",
  "body": "Typegrind is a type preserving heap profiler for C++ - it collects memory allocation information with type information.\r\n\r\nComponents\r\n---\r\n\r\nTypegrind consists of two main components:\r\n\r\n* Instrumentator, which is a source-to-source compiler, decorating the C++ source with code required for the logger.\r\n* Loggers, which do something useful with the information provided by the instrumented code (e.g. write it to a logfile).\r\n\r\nBuilding\r\n---\r\n\r\nTypegrind can be built as part of the clang build process. This repository makes it easier using the [repo tool](https://source.android.com/source/using-repo.html).\r\n\r\nTo checkout and build everything execute:\r\n\r\n```bash\r\nrepo init -u \"https://github.com/typegrind/typegrind.git\"\r\nrepo sync\r\ncd build\r\ncmake ../\r\ncmake --build .\r\n```\r\n\r\nUsage\r\n---\r\n\r\nTODO TODO TODO\r\n\r\nExample\r\n---\r\n\r\nThe original source code:\r\n\r\n```cpp\r\n#include <typegrind/log_to_cout.hpp>\r\n#include <iostream>\r\n\r\nint main() {\r\n  int* a = new int(3);\r\n  std::cout << *a << std::endl;\r\n  delete a;\r\n  return 0;\r\n}\r\n```\r\n\r\nIs transformed to:\r\n\r\n```cpp\r\n#include <typegrind/log_to_cout.hpp>\r\n#include <iostream>\r\n\r\nint main() {\r\n  int* a = TYPEGRIND_LOG_ALLOC(\"int*\", \"example.cpp:6\", new int(3), sizeof(int));\r\n  std::cout << *a << std::endl;\r\n  TYPEGRIND_LOG_DEALLOC(a, \"example.cpp:8\", delete a);\r\n  return 0;\r\n}\r\n```\r\n\r\nWhich is transformed by a logger, for example by the demo cout logger to:\r\n\r\n```cpp\r\n#include <typegrind/log_to_cout.hpp>\r\n#include <iostream>\r\n\r\nint main() {\r\n  int* a = typegrind::log_cout::alloc(\"int*\", \"example.cpp:6\", (new int(3)), sizeof(int));\r\n  std::cout << *a << std::endl;\r\n  typegrind::log_cout::dealloc(a, \"example.cpp:8\"); (delete a);\r\n  return 0;\r\n}\r\n```\r\n\r\nKnown limitations\r\n---\r\n\r\n * Exotic macros related to object allocation will cause compilation errors. For example:\r\n   ```cpp\r\n     #define DECL_AN_INT(name) int* name = new int(0);\r\n   ```\r\n * Delete loggers might call the pointer expression twice - once for logging, once for deleting it. It has to be extracted into a variable before use.\r\n * Include directives / linker settings aren't modified by typegrind. The projects using it should include the desired logger, and link to it's library if it has one.\r\n * Instrumenting system includes is problematic - an overlay should be used for files outside the project scope\r\n\r\n\r\nFuture work\r\n---\r\n\r\n * Solve the above limitations\r\n * Implement the planned macros in the API (see API docs for details - some of them require more research)\r\n * Improve the usage process (call clang with an in-memory VFS automatically)\r\n * Create production ready standard loggers\r\n * Create a user friendly logger frontend\r\n * Make it possible to build Typegrind without building clang from sources first\r\n\r\n\r\nDocumentation\r\n---\r\n\r\nThe documentation can be found under the `doc` folder in the source, written in markdown, browsable on GitHub.\r\n\r\n\r\nCredits\r\n---\r\n\r\nTypegrind is based on:\r\n * J. Mihalicza, Z. Porkoláb, and A. Gábor, [Type-preserving heap profiler for C++](http://dx.doi.org/10.1109/ICSM.2011.6080813) (2011)\r\n * J. Mihalicza, [Analysis and Methods for Supporting Generative Metaprogramming in Large Scale C++ Projects](http://www.tnkcs.inf.elte.hu/vedes/Mihalicza_Jozsef_Ertekezes.pdf) (2014)\r\n * The type-preserving heap-profiler used by [NNG Llc.](http://nng.com/en/), also based on the above articles\r\n\r\nLicense\r\n---\r\n\r\nTypekit is published under the \r\n[MIT License](https://opensource.org/licenses/MIT)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}